[{"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/index.js":"1","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/serviceWorker.js":"2","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/Main.js":"3","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/UploadPane.js":"4","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/ImgBin.js":"5","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/Drawer.js":"6","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/BoardCointainer.js":"7","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/BoardsList.js":"8","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/App.tsx":"9"},{"size":803,"mtime":1607637986351,"results":"10","hashOfConfig":"11"},{"size":5086,"mtime":1607484686414,"results":"12","hashOfConfig":"11"},{"size":2823,"mtime":1607628458275,"results":"13","hashOfConfig":"11"},{"size":1505,"mtime":1614036859118,"results":"14","hashOfConfig":"11"},{"size":9641,"mtime":1607637912702,"results":"15","hashOfConfig":"11"},{"size":3713,"mtime":1607637806698,"results":"16","hashOfConfig":"11"},{"size":2750,"mtime":1607633628957,"results":"17","hashOfConfig":"11"},{"size":1011,"mtime":1607632926634,"results":"18","hashOfConfig":"11"},{"size":3165,"mtime":1614040016661,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1wxpxni",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/index.js",[],["42","43"],"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/serviceWorker.js",[],"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/Main.js",["44"],"import React from 'react'\nimport UploadPane from './UploadPane'\nimport ImgBin from './ImgBin'\nimport { baseURL } from './constants'\nimport Drawer from './Drawer'\n\nclass Main extends React.Component {\n  state = {\n    images: [],\n    boardImages: [],\n    board: 1\n  }\n\n  loadBoard = id => {\n    this.setState({\n      board: parseInt(id)\n    })\n  }\n \n  componentDidMount = () => {\n    fetch(`http://localhost:3000/images`, {\n      method: 'GET',\n    })\n      .then((resp) => resp.json())\n      .then((upImages) => {\n        this.setState({\n          images: upImages,\n        });\n      });\n    \n    fetch(`http://localhost:3000/boards/${this.state.board}/`, {\n      method: \"GET\",\n    })\n      .then(resp => resp.json())\n      .then(boardImgs => {\n        this.setState({\n        boardImages: boardImgs.board_images\n      })\n    })\n  };\n\n  imgUploaded = obj => {\n    this.setState(() => (\n      { images: [...this.state.images, obj] }\n    ))\n  }\n\n  removeImage = imgId => {\n    console.log(imgId)\n    fetch(`http://localhost:3000/images/${imgId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accepts\": \"application/json\"\n      }\n    })\n      .then(() => {\n        this.componentDidMount()\n      })\n      .then(this.findImageBoardId(imgId))\n  }\n\n  findImageBoardId = imgId => {\n    fetch(`http://localhost:3000/board_images`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accepts\": \"application/json\"\n      }\n    })\n      .then(resp => resp.json())\n      .then(boardImgArray => {\n        const stateBoardImgId = boardImgArray.find(boardImg => boardImg.image_id === imgId) \n        if (stateBoardImgId) {\n          this.removeBoardImage(stateBoardImgId.id, imgId)\n        }\n        console.log(\"Found BoardImage\", stateBoardImgId)\n        \n      })\n  }\n\n  removeBoardImage = (stateBoardImgId, imgId) => {\n    fetch(`http://localhost:3000/boards/${this.state.board}/board_images/${parseInt(stateBoardImgId)}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accepts\": \"application/json\"\n      }\n    })\n    console.log(this.state.images)\n      const newImgArray = this.state.images.filter(img => img.id !== imgId)\n    this.setState({\n        images: newImgArray\n    })\n    console.log(\"finished removing BoardImage\", this.state.images)\n  }\n\n  render() {\n    return (\n      <>\n        <Drawer loadBoard={this.loadBoard}/>\n\t\t\t\t<div>\n          <UploadPane board={this.state.board} user={this.state.user} imgUploaded={this.imgUploaded} />\n          <ImgBin board={this.state.board} removeImageFromBoard={this.findImageBoardId} boardImages={this.state.boardImages} images={this.state.images} removeImage={this.removeImage}/>\n        \n\t\t\t\t</div>\n      </>\n\t\t);\n\t}\n}\n\nexport default Main;\n\n","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/UploadPane.js",["45","46","47"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, useTheme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tmargin: theme.spacing(1),\n\t\tdisplay: 'flex',\n\t\t\n\t},\n\tremoveBtn: {\n\t\tmarginTop: '1.5vh',\n\t\tmarginLeft: '15vw',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'stretch'\n\t}\n}))\n\nexport default function UploadPane(props) {\n\tconst classes = useStyles()\n\tconst maxSize = 104576;\n\n\tconst handleUploadSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\t// const token = localStorage.getItem('token');\n\t\tconst files = e.target.files;\n\t\tconsole.log('Files: ', e.target.files);\n\t\tfor (const file of files) {\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append('img_src', file);\n\t\t\tfetch('http://localhost:3000/images', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\t// headers: {\n\t\t\t\t// Authorization: `Bearer ${token}`,\n\t\t\t\t// },\n\t\t\t\tbody: formData,\n\t\t\t})\n\t\t\t\t.then((resp) => resp.json())\n\t\t\t\t.then((newImage) => {\n\t\t\t\t\t// createBoardAssociation(newImage.id);\n\t\t\t\t\tprops.imgUploaded(newImage);\n\t\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={classes.removeBtn}>\n\t\t\t<label className={classes.removeBtn} htmlFor='image-upload'>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\tid=\"image-upload\"\n\t\t\t\t\t\tmultiple=\"multiple\"\n\t\t\t\t\t\tonChange={handleUploadSubmit}\n\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t/>\n\n\t\t\t\t<Button className={classes.removeBtn} component='span' variant='contained'>\n\t\t\t\t\tUpload Images\n\t\t\t\t</Button>\n\t\t\t\t</label>\n\t\t</div>\n\t);\n}\n","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/ImgBin.js",[],"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/Drawer.js",[],"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/BoardCointainer.js",[],"/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/BoardsList.js",["48"],"import React from 'react';\nimport { Button, makeStyles } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\t'& > *': {\n\t\t\tmargin: theme.spacing(1),\n\t\t\tjustifyContent: 'space-between'\n\t\t},\n\t},\n\tmoodTitle: {\n\t\tflexDirection: 'row',\n\t\tmarginLeft: '2vw',\n\t\tjustifyContent: 'space-between',\n\t\tflex: 1\n\t},\n\tremoveBtn: {\n\t\tbackgroundColor: 'red'\n\t}\n}));\n\nconst BoardsList = (props) => {\n\tconst classes = useStyles();\n\n\tconst clickHandler = (e) => {\n\t\tprops.loadBoard(e.target.parentElement.parentElement.parentElement.id);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<Button className={classes.moodTitle} color=\"primary\" variant=\"contained\" onClick={clickHandler}>\n\t\t\t\t{props.title}\n\t\t\t</Button>\n\t\t\t<Button className={classes.removeBtn} className={classes.moodTitle} color=\"#ffebee\" variant=\"contained\" onClick={props.removeBoard}>\n\t\t\t\t<DeleteForeverIcon />\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nexport default BoardsList;\n","/Users/wardprice/Development/flatiron/Mod5/final/moodboard-fe/src/App.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"58","line":3,"column":22,"nodeType":"55","messageId":"56","endLine":3,"endColumn":30},{"ruleId":"53","severity":1,"message":"59","line":21,"column":8,"nodeType":"55","messageId":"56","endLine":21,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":35,"column":42,"nodeType":"62","endLine":35,"endColumn":71},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'baseURL' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useTheme' is defined but never used.","'maxSize' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]